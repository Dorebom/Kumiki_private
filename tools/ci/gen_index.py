#!/usr/bin/env python3
import os, re, sys, yaml, datetime, json, argparse

def read_frontmatter(md_path):
    try:
        with open(md_path, "r", encoding="utf-8") as f:
            text = f.read()
        if text.startswith("---"):
            end = text.find("\n---", 3)
            if end != -1:
                fm_text = text[3:end]
                fm = yaml.safe_load(fm_text) or {}
                body = text[end+4:]
                return fm, body
    except Exception:
        pass
    return {}, ""

def detect_cr_num(name):
    m = re.search(r"CR[-_]?(\d+)", name, re.I)
    return int(m.group(1)) if m else None

def collect_entries(concept_dir, docs_root):
    md_files = [os.path.join(concept_dir, f) for f in os.listdir(concept_dir) if f.endswith(".md")]
    entries = []
    for p in md_files:
        fm, _ = read_frontmatter(p)
        title = fm.get("title") or os.path.splitext(os.path.basename(p))[0]
        idv = fm.get("id", "")
        status = fm.get("status", "")
        ver = fm.get("version", "")
        updated = fm.get("updated", "")
        tags = fm.get("tags", [])
        rel = os.path.relpath(p, docs_root).replace("\\", "/")
        crn = detect_cr_num(os.path.basename(p))
        entries.append({
            "rel": rel, "title": title, "id": idv, "status": status,
            "version": ver, "updated": updated, "tags": tags, "crn": crn
        })
    return entries

def sort_entries(entries, nav_order_path):
    desired = []
    if os.path.exists(nav_order_path):
        try:
            navcfg = yaml.safe_load(open(nav_order_path, "r", encoding="utf-8")) or {}
            desired = navcfg.get("order") or []
        except Exception:
            desired = []
    order_index = {path: i for i, path in enumerate(desired)}
    # Default CR番号順、番号なしは末尾でファイル名順
    entries_sorted = sorted(entries, key=lambda e: (
        order_index.get(e["rel"], 10_000 + (e["crn"] or 9999)),
        e["rel"]
    ))
    # If no nav_order exists, create one with default order
    if not os.path.exists(nav_order_path):
        with open(nav_order_path, "w", encoding="utf-8") as f:
            yaml.safe_dump({
                "order": [e["rel"] for e in entries_sorted],
                "notes": "任意順に固定したい場合は 'order' の配列で並べ替えてください。相対パス（docs/ からの）を指定。"
            }, f, allow_unicode=True, sort_keys=False)
    return entries_sorted

def write_index(entries_sorted, index_path):
    lines = []
    lines.append("---")
    lines.append('title: "Kumiki 概要（00_concept）"')
    lines.append("---\n")
    lines.append("<!-- AUTO-GENERATED by tools/ci/gen_index.py -->\n")
    lines.append("# Kumiki — コンセプト要件集\n")
    lines.append("最終更新: {} UTC\n".format(datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M")))
    lines.append("\n## 章立て（固定順）\n")
    for e in entries_sorted:
        lines.append("- [{}]({})".format(e["title"], e["rel"]))
    lines.append("\n## 一覧（メタ情報）\n")
    lines.append("| CR | タイトル | ステータス | 版 | 更新日 | タグ |")
    lines.append("|---:|---|---|---|---|---|")
    for e in entries_sorted:
        cr = "CR-{}".format(e["crn"]) if e["crn"] is not None else (e["id"] or "")
        tags = ", ".join(map(str, e["tags"])) if e["tags"] else ""
        lines.append("| {} | [{}]({}) | {} | {} | {} | {} |".format(
            cr, e["title"], e["rel"], e["status"], e["version"], e["updated"], tags
        ))
    os.makedirs(os.path.dirname(index_path), exist_ok=True)
    with open(index_path, "w", encoding="utf-8") as f:
        f.write("\n".join(lines))

def write_mkdocs(entries_sorted, mkdocs_path, docs_root="docs"):
    nav = [{ e["title"]: e["rel"] } for e in entries_sorted]
    cfg = {
        "site_name": "Kumiki Docs",
        "site_description": "Kumiki ドキュメント（00_concept 版）",
        "site_url": "https://example.com",
        "theme": {
            "name": "material",
            "language": "ja",
            "features": [
                "navigation.instant","navigation.tracking","navigation.sections","navigation.top","content.code.copy",
            ],
        },
        "docs_dir": docs_root,
        "use_directory_urls": True,
        "plugins": ["search"],
        "markdown_extensions": [
            "admonition","toc","tables","attr_list","def_list","md_in_html",
            {"pymdownx.superfences": {}},{"pymdownx.details": {}},{"pymdownx.tabbed": {"alternate_style": True}},
        ],
        "nav": [
            {"00_Concept": nav}
        ]
    }
    with open(mkdocs_path, "w", encoding="utf-8") as f:
        yaml.safe_dump(cfg, f, allow_unicode=True, sort_keys=False)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--docs-root", default="docs")
    ap.add_argument("--concept-dir", default=os.path.join("docs","00_concept"))
    ap.add_argument("--nav-config", default=os.path.join("tools","docops_cli","config","nav_order.yml"))
    ap.add_argument("--index-out", default=os.path.join("docs","index.md"))
    ap.add_argument("--mkdocs-out", default="mkdocs.yml")
    ap.add_argument("--update-mkdocs", action="store_true", help="mkdocs.yml も更新する")
    args = ap.parse_args()

    entries = collect_entries(args.concept_dir, args.docs_root)
    entries_sorted = sort_entries(entries, args.nav_config)
    write_index(entries_sorted, args.index_out)
    if args.update_mkdocs:
        write_mkdocs(entries_sorted, args.mkdocs_out, docs_root=args.docs_root)

    result = {
        "written": [args.index_out] + ([args.mkdocs_out] if args.update_mkdocs else []),
        "count": len(entries_sorted),
        "nav_first": entries_sorted[0]["title"] if entries_sorted else None
    }
    print(json.dumps(result, ensure_ascii=False))

if __name__ == "__main__":
    # Lazy import yaml when running as script
    try:
        import yaml  # noqa
    except Exception:
        print("PyYAML が必要です: pip install pyyaml", file=sys.stderr)
        sys.exit(1)
    main()
